{"data":{"site":{"siteMetadata":{"componentPages":[{"path":"/transition","displayName":"Transition","codeSandboxId":null},{"path":"/css-transition","displayName":"CSSTransition","codeSandboxId":"m77l2vp00x"},{"path":"/switch-transition","displayName":"SwitchTransition","codeSandboxId":"switchtransition-component-iqm0d"},{"path":"/transition-group","displayName":"TransitionGroup","codeSandboxId":"00rqyo26kn"}]}},"metadata":{"displayName":"CSSTransition","composes":["./Transition"],"description":{"childMarkdownRemark":{"html":"<p>A transition component inspired by the excellent\n<a href=\"https://docs.angularjs.org/api/ngAnimate\">ng-animate</a> library, you should use it if you're\nusing CSS transitions or animations. It's built upon the\n<a href=\"https://reactcommunity.org/react-transition-group/transition\"><code class=\"language-text\">Transition</code></a>\ncomponent, so it inherits all of its props.</p>\n<p><code class=\"language-text\">CSSTransition</code> applies a pair of class names during the <code class=\"language-text\">appear</code>, <code class=\"language-text\">enter</code>,\nand <code class=\"language-text\">exit</code> states of the transition. The first class is applied and then a\nsecond <code class=\"language-text\">*-active</code> class in order to activate the CSS transition. After the\ntransition, matching <code class=\"language-text\">*-done</code> class names are applied to persist the\ntransition state.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>inProp<span class=\"token punctuation\">,</span> setInProp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CSSTransition</span> <span class=\"token attr-name\">in</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inProp<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">timeout</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">200</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">classNames</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>my-node<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token string\">\"I'll receive my-node-* classes\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CSSTransition</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setInProp</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Click to Enter\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the <code class=\"language-text\">in</code> prop is set to <code class=\"language-text\">true</code>, the child component will first receive\nthe class <code class=\"language-text\">example-enter</code>, then the <code class=\"language-text\">example-enter-active</code> will be added in\nthe next tick. <code class=\"language-text\">CSSTransition</code> <a href=\"https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215\">forces a\nreflow</a>\nbetween before adding the <code class=\"language-text\">example-enter-active</code>. This is an important trick\nbecause it allows us to transition between <code class=\"language-text\">example-enter</code> and\n<code class=\"language-text\">example-enter-active</code> even though they were added immediately one after\nanother. Most notably, this is what makes it possible for us to animate\n<em>appearance</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.my-node-enter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.my-node-enter-active</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  /* it's important to define the transition property only in *-active classes *\\/\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> opacity 200ms<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.my-node-exit</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.my-node-exit-active</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> opacity 200ms<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">*-active</code> classes represent which styles you want to animate <strong>to</strong>.</p>\n<p><strong>Note</strong>: If you're using the\n<a href=\"http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear\"><code class=\"language-text\">appear</code></a>\nprop, make sure to define styles for <code class=\"language-text\">.appear-*</code> classes as well.</p>"}},"props":[{"name":"classNames","required":false,"type":{"name":"string | {\n appear?: string,\n appearActive?: string,\n appearDone?: string,\n enter?: string,\n enterActive?: string,\n enterDone?: string,\n exit?: string,\n exitActive?: string,\n exitDone?: string,\n}","value":null,"raw":"classNamesShape"},"defaultValue":{"value":"''","computed":false},"description":{"childMarkdownRemark":{"html":"<p>The animation classNames applied to the component as it appears, enters,\nexits or has finished the transition. A single name can be provided and it\nwill be suffixed for each stage: e.g.</p>\n<p><code class=\"language-text\">classNames=&quot;fade&quot;</code> applies <code class=\"language-text\">fade-appear</code>, <code class=\"language-text\">fade-appear-active</code>,\n<code class=\"language-text\">fade-appear-done</code>, <code class=\"language-text\">fade-enter</code>, <code class=\"language-text\">fade-enter-active</code>, <code class=\"language-text\">fade-enter-done</code>,\n<code class=\"language-text\">fade-exit</code>, <code class=\"language-text\">fade-exit-active</code>, and <code class=\"language-text\">fade-exit-done</code>.</p>\n<p><strong>Note</strong>: <code class=\"language-text\">fade-appear-done</code> and <code class=\"language-text\">fade-enter-done</code> will <em>both</em> be applied.\nThis allows you to define different behavior for when appearing is done and\nwhen regular entering is done, using selectors like\n<code class=\"language-text\">.fade-enter-done:not(.fade-appear-done)</code>. For example, you could apply an\nepic entrance animation when element first appears in the DOM using\n<a href=\"https://daneden.github.io/animate.css/\">Animate.css</a>. Otherwise you can\nsimply use <code class=\"language-text\">fade-enter-done</code> for defining both cases.</p>\n<p>Each individual classNames can also be specified independently like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">classNames<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n appear<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-appear'</span><span class=\"token punctuation\">,</span>\n appearActive<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-active-appear'</span><span class=\"token punctuation\">,</span>\n appearDone<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-done-appear'</span><span class=\"token punctuation\">,</span>\n enter<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-enter'</span><span class=\"token punctuation\">,</span>\n enterActive<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-active-enter'</span><span class=\"token punctuation\">,</span>\n enterDone<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-done-enter'</span><span class=\"token punctuation\">,</span>\n exit<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-exit'</span><span class=\"token punctuation\">,</span>\n exitActive<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-active-exit'</span><span class=\"token punctuation\">,</span>\n exitDone<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-done-exit'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you want to set these classes using CSS Modules:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">'./styles.css'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>you might want to use camelCase in your CSS file, that way could simply\nspread them instead of listing them one by one:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">classNames<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>styles <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>"}},"doclets":[{"tag":"type","value":"{string | {\n appear?: string,\n appearActive?: string,\n appearDone?: string,\n enter?: string,\n enterActive?: string,\n enterDone?: string,\n exit?: string,\n exitActive?: string,\n exitDone?: string,\n}}"}]},{"name":"onEnter","required":false,"type":{"name":"Function(node: HtmlElement, isAppearing: bool)","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">&lt;Transition&gt;</code> callback fired immediately after the 'enter' or 'appear' class is\napplied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement, isAppearing: bool)"}]},{"name":"onEntering","required":false,"type":{"name":"Function(node: HtmlElement, isAppearing: bool)","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">&lt;Transition&gt;</code> callback fired immediately after the 'enter-active' or\n'appear-active' class is applied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement, isAppearing: bool)"}]},{"name":"onEntered","required":false,"type":{"name":"Function(node: HtmlElement, isAppearing: bool)","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">&lt;Transition&gt;</code> callback fired immediately after the 'enter' or\n'appear' classes are <strong>removed</strong> and the <code class=\"language-text\">done</code> class is added to the DOM node.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement, isAppearing: bool)"}]},{"name":"onExit","required":false,"type":{"name":"Function(node: HtmlElement)","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">&lt;Transition&gt;</code> callback fired immediately after the 'exit' class is\napplied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement)"}]},{"name":"onExiting","required":false,"type":{"name":"Function(node: HtmlElement)","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">&lt;Transition&gt;</code> callback fired immediately after the 'exit-active' is applied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement)"}]},{"name":"onExited","required":false,"type":{"name":"Function(node: HtmlElement)","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">&lt;Transition&gt;</code> callback fired immediately after the 'exit' classes\nare <strong>removed</strong> and the <code class=\"language-text\">exit-done</code> class is added to the DOM node.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement)"}]}]}},"pageContext":{"displayName":"CSSTransition"}}