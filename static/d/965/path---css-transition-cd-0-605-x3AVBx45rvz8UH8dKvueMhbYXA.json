{"data":{"site":{"siteMetadata":{"componentPages":[{"path":"/transition","displayName":"Transition","codeSandboxId":"741op4mmj0"},{"path":"/css-transition","displayName":"CSSTransition","codeSandboxId":"m77l2vp00x"},{"path":"/transition-group","displayName":"TransitionGroup","codeSandboxId":"00rqyo26kn"}]}},"metadata":{"displayName":"CSSTransition","composes":["./Transition"],"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">Transition</code> component using CSS transitions and animations. It's inspired\nby the excellent <a href=\"http://www.nganimate.org/\">ng-animate</a> library.</p>\n<p><code class=\"language-text\">CSSTransition</code> applies a pair of class names during the <code class=\"language-text\">appear</code>, <code class=\"language-text\">enter</code>,\nand <code class=\"language-text\">exit</code> states of the transition. The first class is applied and then a\nsecond <code class=\"language-text\">*-active</code> class in order to activate the CSSS transition. After the\ntransition, matching <code class=\"language-text\">*-done</code> class names are applied to persist the\ntransition state.</p>\n<p>When the <code class=\"language-text\">in</code> prop is set to <code class=\"language-text\">true</code> the component will first receive the\n<code class=\"language-text\">example-enter</code> class, then the <code class=\"language-text\">example-enter-active</code> class will be added in\nthe next tick. This is a convention based on the <code class=\"language-text\">classNames</code> prop.</p>\n<h2>The reflow hack</h2>\n<blockquote>\n<p><strong>Note</strong>: For simpler transitions the <code class=\"language-text\">Transition</code> component might be\nenough, but take into account that it's platform-agnostic, while the\n<code class=\"language-text\">CSSTransition</code> component <a href=\"https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215\">forces\nreflows</a>\nin order to make more complex transitions more predictable. For example,\neven though classes <code class=\"language-text\">example-enter</code> and <code class=\"language-text\">example-enter-active</code> are applied\nimmediately one after another, you can still transition from one to the\nother because of the forced reflow (read <a href=\"https://github.com/reactjs/react-transition-group/issues/159#issuecomment-322761171\">this\nissue</a>\nfor more info). Take this into account when choosing between <code class=\"language-text\">Transition</code>\nand <code class=\"language-text\">CSSTransition</code>.</p>\n</blockquote>"}},"props":[{"name":"classNames","required":false,"type":{"name":"string | {\n appear?: string,\n appearActive?: string,\n enter?: string,\n enterActive?: string,\n enterDone?: string,\n exit?: string,\n exitActive?: string,\n exitDone?: string,\n}","value":null,"raw":"classNamesShape"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The animation classNames applied to the component as it enters, exits or has finished the transition.\nA single name can be provided and it will be suffixed for each stage: e.g.</p>\n<p><code class=\"language-text\">classNames=&quot;fade&quot;</code> applies <code class=\"language-text\">fade-enter</code>, <code class=\"language-text\">fade-enter-active</code>, <code class=\"language-text\">fade-enter-done</code>,\n<code class=\"language-text\">fade-exit</code>, <code class=\"language-text\">fade-exit-active</code>, <code class=\"language-text\">fade-exit-done</code>, <code class=\"language-text\">fade-appear</code>, and <code class=\"language-text\">fade-appear-active</code>.\nEach individual classNames can also be specified independently like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">classNames<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n appear<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-appear'</span><span class=\"token punctuation\">,</span>\n appearActive<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-active-appear'</span><span class=\"token punctuation\">,</span>\n enter<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-enter'</span><span class=\"token punctuation\">,</span>\n enterActive<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-active-enter'</span><span class=\"token punctuation\">,</span>\n enterDone<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-done-enter'</span><span class=\"token punctuation\">,</span>\n exit<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-exit'</span><span class=\"token punctuation\">,</span>\n exitActive<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-active-exit'</span><span class=\"token punctuation\">,</span>\n exitDone<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-done-exit'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you want to set these classes using CSS Modules:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">'./styles.css'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>you might want to use camelCase in your CSS file, that way could simply spread\nthem instead of listing them one by one:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">classNames<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>styles <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>"}},"doclets":[{"tag":"type","value":"{string | {\n appear?: string,\n appearActive?: string,\n enter?: string,\n enterActive?: string,\n enterDone?: string,\n exit?: string,\n exitActive?: string,\n exitDone?: string,\n}}"}]},{"name":"onEnter","required":false,"type":{"name":"Function(node: HtmlElement, isAppearing: bool)","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">&lt;Transition&gt;</code> callback fired immediately after the 'enter' or 'appear' class is\napplied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement, isAppearing: bool)"}]},{"name":"onEntering","required":false,"type":{"name":"Function(node: HtmlElement, isAppearing: bool)","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">&lt;Transition&gt;</code> callback fired immediately after the 'enter-active' or\n'appear-active' class is applied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement, isAppearing: bool)"}]},{"name":"onEntered","required":false,"type":{"name":"Function(node: HtmlElement, isAppearing: bool)","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">&lt;Transition&gt;</code> callback fired immediately after the 'enter' or\n'appear' classes are <strong>removed</strong> and the <code class=\"language-text\">done</code> class is added to the DOM node.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement, isAppearing: bool)"}]},{"name":"onExit","required":false,"type":{"name":"Function(node: HtmlElement)","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">&lt;Transition&gt;</code> callback fired immediately after the 'exit' class is\napplied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement)"}]},{"name":"onExiting","required":false,"type":{"name":"Function(node: HtmlElement)","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">&lt;Transition&gt;</code> callback fired immediately after the 'exit-active' is applied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement)"}]},{"name":"onExited","required":false,"type":{"name":"Function(node: HtmlElement)","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">&lt;Transition&gt;</code> callback fired immediately after the 'exit' classes\nare <strong>removed</strong> and the <code class=\"language-text\">exit-done</code> class is added to the DOM node.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement)"}]}]}},"pageContext":{"displayName":"CSSTransition"}}