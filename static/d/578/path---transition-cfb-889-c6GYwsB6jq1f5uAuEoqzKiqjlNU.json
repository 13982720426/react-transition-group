{"data":{"site":{"siteMetadata":{"componentPages":[{"path":"/transition","displayName":"Transition","codeSandboxId":null},{"path":"/css-transition","displayName":"CSSTransition","codeSandboxId":"m77l2vp00x"},{"path":"/transition-group","displayName":"TransitionGroup","codeSandboxId":"00rqyo26kn"}]}},"metadata":{"displayName":"Transition","composes":null,"description":{"childMarkdownRemark":{"html":"<p>The Transition component lets you describe a transition from one component\nstate to another <em>over time</em> with a simple declarative API. Most commonly\nit's used to animate the mounting and unmounting of a component, but can also\nbe used to describe in-place transition states as well.</p>\n<hr>\n<p><strong>Note</strong>: <code class=\"language-text\">Transition</code> is a platform-agnostic base component. If you're using\ntransitions in CSS, you'll probably want to use\n<a href=\"https://reactcommunity.org/react-transition-group/css-transition\"><code class=\"language-text\">CSSTransition</code></a>\ninstead. It inherits all the features of <code class=\"language-text\">Transition</code>, but contains\nadditional features necessary to play nice with CSS transitions (hence the\nname of the component).</p>\n<hr>\n<p>By default the <code class=\"language-text\">Transition</code> component does not alter the behavior of the\ncomponent it renders, it only tracks \"enter\" and \"exit\" states for the\ncomponents. It's up to you to give meaning and effect to those states. For\nexample we can add styles to a component when it enters or exits:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Transition <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-transition-group'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> duration <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> defaultStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  transition<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`opacity </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>duration<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">ms ease-in-out`</span></span><span class=\"token punctuation\">,</span>\n  opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> transitionStyles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entering<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  entered<span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">{</span> opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Fade</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> inProp <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Transition</span> <span class=\"token attr-name\">in</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inProp<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">timeout</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>duration<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>state <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>defaultStyle<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>transitionStyles<span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        I'm a fade Transition!\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Transition</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are 4 main states a Transition can be in:</p>\n<ul>\n<li><code class=\"language-text\">&#39;entering&#39;</code></li>\n<li><code class=\"language-text\">&#39;entered&#39;</code></li>\n<li><code class=\"language-text\">&#39;exiting&#39;</code></li>\n<li><code class=\"language-text\">&#39;exited&#39;</code></li>\n</ul>\n<p>Transition state is toggled via the <code class=\"language-text\">in</code> prop. When <code class=\"language-text\">true</code> the component\nbegins the \"Enter\" stage. During this stage, the component will shift from\nits current transition state, to <code class=\"language-text\">&#39;entering&#39;</code> for the duration of the\ntransition and then to the <code class=\"language-text\">&#39;entered&#39;</code> stage once it's complete. Let's take\nthe following example (we'll use the\n<a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\">useState</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>inProp<span class=\"token punctuation\">,</span> setInProp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Transition</span> <span class=\"token attr-name\">in</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inProp<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">timeout</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>state <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Transition</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setInProp</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Click to Enter\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the button is clicked the component will shift to the <code class=\"language-text\">&#39;entering&#39;</code> state\nand stay there for 500ms (the value of <code class=\"language-text\">timeout</code>) before it finally switches\nto <code class=\"language-text\">&#39;entered&#39;</code>.</p>\n<p>When <code class=\"language-text\">in</code> is <code class=\"language-text\">false</code> the same thing happens except the state moves from\n<code class=\"language-text\">&#39;exiting&#39;</code> to <code class=\"language-text\">&#39;exited&#39;</code>.</p>"}},"props":[{"name":"children","required":true,"type":{"name":"union","value":[{"name":"func"},{"name":"element"}],"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">function</code> child can be used instead of a React element. This function is\ncalled with the current transition status (<code class=\"language-text\">&#39;entering&#39;</code>, <code class=\"language-text\">&#39;entered&#39;</code>,\n<code class=\"language-text\">&#39;exiting&#39;</code>, <code class=\"language-text\">&#39;exited&#39;</code>, <code class=\"language-text\">&#39;unmounted&#39;</code>), which can be used to apply context\nspecific props to a component.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Transition</span> <span class=\"token attr-name\">in</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">timeout</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">150</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>state <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MyComponent</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`fade fade-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Transition</span><span class=\"token punctuation\">></span></span></code></pre></div>"}},"doclets":[]},{"name":"in","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Show the component; triggers the enter or exit states</p>"}},"doclets":[]},{"name":"mountOnEnter","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>By default the child component is mounted immediately along with\nthe parent <code class=\"language-text\">Transition</code> component. If you want to \"lazy mount\" the component on the\nfirst <code class=\"language-text\">in={true}</code> you can set <code class=\"language-text\">mountOnEnter</code>. After the first enter transition the component will stay\nmounted, even on \"exited\", unless you also specify <code class=\"language-text\">unmountOnExit</code>.</p>"}},"doclets":[]},{"name":"unmountOnExit","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>By default the child component stays mounted after it reaches the <code class=\"language-text\">&#39;exited&#39;</code> state.\nSet <code class=\"language-text\">unmountOnExit</code> if you'd prefer to unmount the component after it finishes exiting.</p>"}},"doclets":[]},{"name":"appear","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Normally a component is not transitioned if it is shown when the <code class=\"language-text\">&lt;Transition&gt;</code> component mounts.\nIf you want to transition on the first mount set <code class=\"language-text\">appear</code> to <code class=\"language-text\">true</code>, and the\ncomponent will transition in as soon as the <code class=\"language-text\">&lt;Transition&gt;</code> mounts.</p>\n<blockquote>\n<p>Note: there are no specific \"appear\" states. <code class=\"language-text\">appear</code> only adds an additional <code class=\"language-text\">enter</code> transition.</p>\n</blockquote>"}},"doclets":[]},{"name":"enter","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Enable or disable enter transitions.</p>"}},"doclets":[]},{"name":"exit","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Enable or disable exit transitions.</p>"}},"doclets":[]},{"name":"timeout","required":false,"type":{"name":"number | { enter?: number, exit?: number, appear?: number }","value":null,"raw":"(props, ...args) => {\n  let pt = timeoutsShape\n  if (!props.addEndListener) pt = pt.isRequired\n  return pt(props, ...args)\n}"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The duration of the transition, in milliseconds.\nRequired unless <code class=\"language-text\">addEndListener</code> is provided.</p>\n<p>You may specify a single timeout for all transitions:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">timeout<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>or individually:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">timeout<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n appear<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n enter<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n exit<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">appear</code> defaults to the value of <code class=\"language-text\">enter</code></li>\n<li><code class=\"language-text\">enter</code> defaults to <code class=\"language-text\">0</code></li>\n<li><code class=\"language-text\">exit</code> defaults to <code class=\"language-text\">0</code></li>\n</ul>"}},"doclets":[{"tag":"type","value":"{number | { enter?: number, exit?: number, appear?: number }}"}]},{"name":"addEndListener","required":false,"type":{"name":"func","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Add a custom transition end trigger. Called with the transitioning\nDOM node and a <code class=\"language-text\">done</code> callback. Allows for more fine grained transition end\nlogic. <strong>Note:</strong> Timeouts are still used as a fallback if provided.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">addEndListener<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// use the css transitionend event to mark the finish of a transition</span>\n  node<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transitionend'</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>"}},"doclets":[]},{"name":"onEnter","required":false,"type":{"name":"Function(node: HtmlElement, isAppearing: bool) -> void","value":null,"raw":null},"defaultValue":{"value":"function noop() {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Callback fired before the \"entering\" status is applied. An extra parameter\n<code class=\"language-text\">isAppearing</code> is supplied to indicate if the enter stage is occurring on the initial mount</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement, isAppearing: bool) -> void"}]},{"name":"onEntering","required":false,"type":{"name":"Function(node: HtmlElement, isAppearing: bool)","value":null,"raw":null},"defaultValue":{"value":"function noop() {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the \"entering\" status is applied. An extra parameter\n<code class=\"language-text\">isAppearing</code> is supplied to indicate if the enter stage is occurring on the initial mount</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement, isAppearing: bool)"}]},{"name":"onEntered","required":false,"type":{"name":"Function(node: HtmlElement, isAppearing: bool) -> void","value":null,"raw":null},"defaultValue":{"value":"function noop() {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the \"entered\" status is applied. An extra parameter\n<code class=\"language-text\">isAppearing</code> is supplied to indicate if the enter stage is occurring on the initial mount</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement, isAppearing: bool) -> void"}]},{"name":"onExit","required":false,"type":{"name":"Function(node: HtmlElement) -> void","value":null,"raw":null},"defaultValue":{"value":"function noop() {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Callback fired before the \"exiting\" status is applied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement) -> void"}]},{"name":"onExiting","required":false,"type":{"name":"Function(node: HtmlElement) -> void","value":null,"raw":null},"defaultValue":{"value":"function noop() {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the \"exiting\" status is applied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement) -> void"}]},{"name":"onExited","required":false,"type":{"name":"Function(node: HtmlElement) -> void","value":null,"raw":null},"defaultValue":{"value":"function noop() {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the \"exited\" status is applied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement) -> void"}]}]}},"pageContext":{"displayName":"Transition"}}