{"data":{"site":{"siteMetadata":{"componentPages":[{"path":"/transition","displayName":"Transition","codeSandboxId":"741op4mmj0"},{"path":"/css-transition","displayName":"CSSTransition","codeSandboxId":"m77l2vp00x"},{"path":"/transition-group","displayName":"TransitionGroup","codeSandboxId":"00rqyo26kn"}]}},"metadata":{"displayName":"Transition","composes":null,"description":{"childMarkdownRemark":{"html":"<p>The Transition component lets you describe a transition from one component\nstate to another <em>over time</em> with a simple declarative API. Most commonly\nit's used to animate the mounting and unmounting of a component, but can also\nbe used to describe in-place transition states as well.</p>\n<p>By default the <code class=\"language-text\">Transition</code> component does not alter the behavior of the\ncomponent it renders, it only tracks \"enter\" and \"exit\" states for the components.\nIt's up to you to give meaning and effect to those states. For example we can\nadd styles to a component when it enters or exits:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> Transition <span class=\"token keyword\">from</span> <span class=\"token string\">'react-transition-group/Transition'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> duration <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> defaultStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  transition<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`opacity </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>duration<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">ms ease-in-out`</span></span><span class=\"token punctuation\">,</span>\n  opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> transitionStyles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entering<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  entered<span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">{</span> opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Fade</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> inProp <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Transition</span> <span class=\"token attr-name\">in</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inProp<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">timeout</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>duration<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>defaultStyle<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>transitionStyles<span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        I'm a fade Transition!\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Transition</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As noted the <code class=\"language-text\">Transition</code> component doesn't <em>do</em> anything by itself to its child component.\nWhat it does do is track transition states over time so you can update the\ncomponent (such as by adding styles or classes) when it changes states.</p>\n<p>There are 4 main states a Transition can be in:</p>\n<ul>\n<li><code class=\"language-text\">&#39;entering&#39;</code></li>\n<li><code class=\"language-text\">&#39;entered&#39;</code></li>\n<li><code class=\"language-text\">&#39;exiting&#39;</code></li>\n<li><code class=\"language-text\">&#39;exited&#39;</code></li>\n</ul>\n<p>Transition state is toggled via the <code class=\"language-text\">in</code> prop. When <code class=\"language-text\">true</code> the component begins the\n\"Enter\" stage. During this stage, the component will shift from its current transition state,\nto <code class=\"language-text\">&#39;entering&#39;</code> for the duration of the transition and then to the <code class=\"language-text\">&#39;entered&#39;</code> stage once\nit's complete. Let's take the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">toggleEnterState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Transition</span> <span class=\"token attr-name\">in</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">timeout</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleEnterState<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click to Enter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the button is clicked the component will shift to the <code class=\"language-text\">&#39;entering&#39;</code> state and\nstay there for 500ms (the value of <code class=\"language-text\">timeout</code>) before it finally switches to <code class=\"language-text\">&#39;entered&#39;</code>.</p>\n<p>When <code class=\"language-text\">in</code> is <code class=\"language-text\">false</code> the same thing happens except the state moves from <code class=\"language-text\">&#39;exiting&#39;</code> to <code class=\"language-text\">&#39;exited&#39;</code>.</p>\n<h2>Timing</h2>\n<p>Timing is often the trickiest part of animation, mistakes can result in slight delays\nthat are hard to pin down. A common example is when you want to add an exit transition,\nyou should set the desired final styles when the state is <code class=\"language-text\">&#39;exiting&#39;</code>. That's when the\ntransition to those styles will start and, if you matched the <code class=\"language-text\">timeout</code> prop with the\nCSS Transition duration, it will end exactly when the state changes to <code class=\"language-text\">&#39;exited&#39;</code>.</p>\n<blockquote>\n<p><strong>Note</strong>: For simpler transitions the <code class=\"language-text\">Transition</code> component might be enough, but\ntake into account that it's platform-agnostic, while the <code class=\"language-text\">CSSTransition</code> component\n<a href=\"https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215\">forces reflows</a>\nin order to make more complex transitions more predictable. For example, even though\nclasses <code class=\"language-text\">example-enter</code> and <code class=\"language-text\">example-enter-active</code> are applied immediately one after\nanother, you can still transition from one to the other because of the forced reflow\n(read <a href=\"https://github.com/reactjs/react-transition-group/issues/159#issuecomment-322761171\">this issue</a>\nfor more info). Take this into account when choosing between <code class=\"language-text\">Transition</code> and\n<code class=\"language-text\">CSSTransition</code>.</p>\n</blockquote>"}},"props":[{"name":"children","required":true,"type":{"name":"union","value":[{"name":"func"},{"name":"element"}],"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">function</code> child can be used instead of a React element.\nThis function is called with the current transition status\n('entering', 'entered', 'exiting', 'exited', 'unmounted'), which can be used\nto apply context specific props to a component.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Transition</span> <span class=\"token attr-name\">timeout</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">150</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MyComponent</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`fade fade-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Transition</span><span class=\"token punctuation\">></span></span></code></pre></div>"}},"doclets":[]},{"name":"in","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Show the component; triggers the enter or exit states</p>"}},"doclets":[]},{"name":"mountOnEnter","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>By default the child component is mounted immediately along with\nthe parent <code class=\"language-text\">Transition</code> component. If you want to \"lazy mount\" the component on the\nfirst <code class=\"language-text\">in={true}</code> you can set <code class=\"language-text\">mountOnEnter</code>. After the first enter transition the component will stay\nmounted, even on \"exited\", unless you also specify <code class=\"language-text\">unmountOnExit</code>.</p>"}},"doclets":[]},{"name":"unmountOnExit","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>By default the child component stays mounted after it reaches the <code class=\"language-text\">&#39;exited&#39;</code> state.\nSet <code class=\"language-text\">unmountOnExit</code> if you'd prefer to unmount the component after it finishes exiting.</p>"}},"doclets":[]},{"name":"appear","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Normally a component is not transitioned if it is shown when the <code class=\"language-text\">&lt;Transition&gt;</code> component mounts.\nIf you want to transition on the first mount set <code class=\"language-text\">appear</code> to <code class=\"language-text\">true</code>, and the\ncomponent will transition in as soon as the <code class=\"language-text\">&lt;Transition&gt;</code> mounts.</p>\n<blockquote>\n<p>Note: there are no specific \"appear\" states. <code class=\"language-text\">appear</code> only adds an additional <code class=\"language-text\">enter</code> transition.</p>\n</blockquote>"}},"doclets":[]},{"name":"enter","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Enable or disable enter transitions.</p>"}},"doclets":[]},{"name":"exit","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Enable or disable exit transitions.</p>"}},"doclets":[]},{"name":"timeout","required":false,"type":{"name":"number | { enter?: number, exit?: number, appear?: number }","value":null,"raw":"(props, ...args) => {\n  let pt = timeoutsShape\n  if (!props.addEndListener) pt = pt.isRequired\n  return pt(props, ...args)\n}"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The duration of the transition, in milliseconds.\nRequired unless <code class=\"language-text\">addEndListener</code> is provided</p>\n<p>You may specify a single timeout for all transitions like: <code class=\"language-text\">timeout={500}</code>,\nor individually like:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">timeout<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n enter<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n exit<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n appear<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the value of <code class=\"language-text\">appear</code> is not set, then the value from enter is taken.</p>\n<p>If the <code class=\"language-text\">enter</code> or <code class=\"language-text\">exit</code> value is <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>, then the timer is set to <code class=\"language-text\">0</code></p>"}},"doclets":[{"tag":"type","value":"{number | { enter?: number, exit?: number, appear?: number }}"}]},{"name":"addEndListener","required":false,"type":{"name":"func","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Add a custom transition end trigger. Called with the transitioning\nDOM node and a <code class=\"language-text\">done</code> callback. Allows for more fine grained transition end\nlogic. <strong>Note:</strong> Timeouts are still used as a fallback if provided.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">addEndListener<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// use the css transitionend event to mark the finish of a transition</span>\n  node<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transitionend'</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>"}},"doclets":[]},{"name":"onEnter","required":false,"type":{"name":"Function(node: HtmlElement, isAppearing: bool) -> void","value":null,"raw":null},"defaultValue":{"value":"function noop() {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Callback fired before the \"entering\" status is applied. An extra parameter\n<code class=\"language-text\">isAppearing</code> is supplied to indicate if the enter stage is occurring on the initial mount</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement, isAppearing: bool) -> void"}]},{"name":"onEntering","required":false,"type":{"name":"Function(node: HtmlElement, isAppearing: bool)","value":null,"raw":null},"defaultValue":{"value":"function noop() {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the \"entering\" status is applied. An extra parameter\n<code class=\"language-text\">isAppearing</code> is supplied to indicate if the enter stage is occurring on the initial mount</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement, isAppearing: bool)"}]},{"name":"onEntered","required":false,"type":{"name":"Function(node: HtmlElement, isAppearing: bool) -> void","value":null,"raw":null},"defaultValue":{"value":"function noop() {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the \"entered\" status is applied. An extra parameter\n<code class=\"language-text\">isAppearing</code> is supplied to indicate if the enter stage is occurring on the initial mount</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement, isAppearing: bool) -> void"}]},{"name":"onExit","required":false,"type":{"name":"Function(node: HtmlElement) -> void","value":null,"raw":null},"defaultValue":{"value":"function noop() {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Callback fired before the \"exiting\" status is applied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement) -> void"}]},{"name":"onExiting","required":false,"type":{"name":"Function(node: HtmlElement) -> void","value":null,"raw":null},"defaultValue":{"value":"function noop() {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the \"exiting\" status is applied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement) -> void"}]},{"name":"onExited","required":false,"type":{"name":"Function(node: HtmlElement) -> void","value":null,"raw":null},"defaultValue":{"value":"function noop() {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the \"exited\" status is applied.</p>"}},"doclets":[{"tag":"type","value":"Function(node: HtmlElement) -> void"}]}]}},"pageContext":{"displayName":"Transition"}}