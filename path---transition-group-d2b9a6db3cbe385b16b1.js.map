{"version":3,"sources":["webpack:///path---transition-group-d2b9a6db3cbe385b16b1.js","webpack:///./.cache/json/transition-group.json"],"names":["webpackJsonp","414","module","exports","data","metadata","displayName","composes","description","childMarkdownRemark","html","props","name","required","type","value","raw","defaultValue","computed","doclets","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,UAAYC,YAAA,kBAAAC,SAAA,KAAAC,aAA+DC,qBAAuBC,KAAA,orCAAgsCC,QAAWC,KAAA,YAAAC,UAAA,EAAAC,MAA4CF,KAAA,MAAAG,MAAA,KAAAC,IAAA,MAAqCC,cAAiBF,MAAA,QAAAG,UAAA,GAAiCV,aAAgBC,qBAAuBC,KAAA,4WAAkXS,SAAYL,KAAA,QAAeF,KAAA,WAAAC,UAAA,EAAAC,MAA2CF,KAAA,OAAAG,MAAA,KAAAC,IAAA,MAAsCC,aAAA,KAAAT,aAAoCC,qBAAuBC,KAAA,iVAAuVS,SAAYL,KAAA,QAAeF,KAAA,SAAAC,UAAA,EAAAC,MAAyCF,KAAA,OAAAG,MAAA,KAAAC,IAAA,MAAsCC,aAAA,KAAAT,aAAoCC,qBAAuBC,KAAA,0LAAgMS,SAAYL,KAAA,QAAeF,KAAA,QAAAC,UAAA,EAAAC,MAAwCF,KAAA,OAAAG,MAAA,KAAAC,IAAA,MAAsCC,aAAA,KAAAT,aAAoCC,qBAAuBC,KAAA,yLAA+LS,SAAYL,KAAA,QAAeF,KAAA,OAAAC,UAAA,EAAAC,MAAuCF,KAAA,OAAAG,MAAA,KAAAC,IAAA,MAAsCC,aAAA,KAAAT,aAAoCC,qBAAuBC,KAAA,wLAA8LS,SAAYL,KAAA,QAAeF,KAAA,eAAAC,UAAA,EAAAC,MAA+CF,KAAA,gDAAAG,MAAA,KAAAC,IAAA,MAA+EC,cAAiBF,MAAA,iBAAAG,UAAA,GAA0CV,aAAgBC,qBAAuBC,KAAA,oZAA0ZS,SAAYL,KAAA,qDAA2DM,aAAgBd,YAAA","file":"path---transition-group-d2b9a6db3cbe385b16b1.js","sourcesContent":["webpackJsonp([205003755392829],{\n\n/***/ 414:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"metadata\":{\"displayName\":\"TransitionGroup\",\"composes\":null,\"description\":{\"childMarkdownRemark\":{\"html\":\"<p>The <code>&#x3C;TransitionGroup></code> component manages a set of <code>&#x3C;Transition></code> components\\nin a list. Like with the <code>&#x3C;Transition></code> component, <code>&#x3C;TransitionGroup></code>, is a\\nstate machine for managing the mounting and unmounting of components over\\ntime.</p>\\n<p>Consider the example below using the <code>Fade</code> CSS transition from before.\\nAs items are removed or added to the TodoList the <code>in</code> prop is toggled\\nautomatically by the <code>&#x3C;TransitionGroup></code>. You can use <em>any</em> <code>&#x3C;Transition></code>\\ncomponent in a <code>&#x3C;TransitionGroup></code>, not just css.</p>\\n<h2>Example</h2>\\n<iframe src=\\\"https://codesandbox.io/embed/00rqyo26kn?fontsize=14\\\" style=\\\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\\\" sandbox=\\\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\\\"></iframe>\\n<p>Note that <code>&#x3C;TransitionGroup></code>  does not define any animation behavior!\\nExactly <em>how</em> a list item animates is up to the individual <code>&#x3C;Transition></code>\\ncomponents. This means you can mix and match animations across different\\nlist items.</p>\"}},\"props\":[{\"name\":\"component\",\"required\":false,\"type\":{\"name\":\"any\",\"value\":null,\"raw\":null},\"defaultValue\":{\"value\":\"'div'\",\"computed\":false},\"description\":{\"childMarkdownRemark\":{\"html\":\"<p><code>&#x3C;TransitionGroup></code> renders a <code>&#x3C;div></code> by default. You can change this\\nbehavior by providing a <code>component</code> prop.\\nIf you use React v16+ and would like to avoid a wrapping <code>&#x3C;div></code> element\\nyou can pass in <code>component={null}</code>. This is useful if the wrapping div\\nborks your css styles.</p>\"}},\"doclets\":{\"type\":null}},{\"name\":\"children\",\"required\":false,\"type\":{\"name\":\"node\",\"value\":null,\"raw\":null},\"defaultValue\":null,\"description\":{\"childMarkdownRemark\":{\"html\":\"<p>A set of <code>&#x3C;Transition></code> components, that are toggled <code>in</code> and out as they\\nleave. the <code>&#x3C;TransitionGroup></code> will inject specific transition props, so\\nremember to spread them through if you are wrapping the <code>&#x3C;Transition></code> as\\nwith our <code>&#x3C;Fade></code> example.</p>\"}},\"doclets\":{\"type\":null}},{\"name\":\"appear\",\"required\":false,\"type\":{\"name\":\"bool\",\"value\":null,\"raw\":null},\"defaultValue\":null,\"description\":{\"childMarkdownRemark\":{\"html\":\"<p>A convenience prop that enables or disables appear animations\\nfor all children. Note that specifying this will override any defaults set\\non individual children Transitions.</p>\"}},\"doclets\":{\"type\":null}},{\"name\":\"enter\",\"required\":false,\"type\":{\"name\":\"bool\",\"value\":null,\"raw\":null},\"defaultValue\":null,\"description\":{\"childMarkdownRemark\":{\"html\":\"<p>A convenience prop that enables or disables enter animations\\nfor all children. Note that specifying this will override any defaults set\\non individual children Transitions.</p>\"}},\"doclets\":{\"type\":null}},{\"name\":\"exit\",\"required\":false,\"type\":{\"name\":\"bool\",\"value\":null,\"raw\":null},\"defaultValue\":null,\"description\":{\"childMarkdownRemark\":{\"html\":\"<p>A convenience prop that enables or disables exit animations\\nfor all children. Note that specifying this will override any defaults set\\non individual children Transitions.</p>\"}},\"doclets\":{\"type\":null}},{\"name\":\"childFactory\",\"required\":false,\"type\":{\"name\":\"Function(child: ReactElement) -> ReactElement\",\"value\":null,\"raw\":null},\"defaultValue\":{\"value\":\"child => child\",\"computed\":false},\"description\":{\"childMarkdownRemark\":{\"html\":\"<p>You may need to apply reactive updates to a child as it is exiting.\\nThis is generally done by using <code>cloneElement</code> however in the case of an exiting\\nchild the element has already been removed and not accessible to the consumer.</p>\\n<p>If you do need to update a child as it leaves you can provide a <code>childFactory</code>\\nto wrap every child, even the ones that are leaving.</p>\"}},\"doclets\":{\"type\":\"Function(child: ReactElement) -> ReactElement\"}}]}},\"pathContext\":{\"displayName\":\"TransitionGroup\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---transition-group-d2b9a6db3cbe385b16b1.js","module.exports = {\"data\":{\"metadata\":{\"displayName\":\"TransitionGroup\",\"composes\":null,\"description\":{\"childMarkdownRemark\":{\"html\":\"<p>The <code>&#x3C;TransitionGroup></code> component manages a set of <code>&#x3C;Transition></code> components\\nin a list. Like with the <code>&#x3C;Transition></code> component, <code>&#x3C;TransitionGroup></code>, is a\\nstate machine for managing the mounting and unmounting of components over\\ntime.</p>\\n<p>Consider the example below using the <code>Fade</code> CSS transition from before.\\nAs items are removed or added to the TodoList the <code>in</code> prop is toggled\\nautomatically by the <code>&#x3C;TransitionGroup></code>. You can use <em>any</em> <code>&#x3C;Transition></code>\\ncomponent in a <code>&#x3C;TransitionGroup></code>, not just css.</p>\\n<h2>Example</h2>\\n<iframe src=\\\"https://codesandbox.io/embed/00rqyo26kn?fontsize=14\\\" style=\\\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\\\" sandbox=\\\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\\\"></iframe>\\n<p>Note that <code>&#x3C;TransitionGroup></code>  does not define any animation behavior!\\nExactly <em>how</em> a list item animates is up to the individual <code>&#x3C;Transition></code>\\ncomponents. This means you can mix and match animations across different\\nlist items.</p>\"}},\"props\":[{\"name\":\"component\",\"required\":false,\"type\":{\"name\":\"any\",\"value\":null,\"raw\":null},\"defaultValue\":{\"value\":\"'div'\",\"computed\":false},\"description\":{\"childMarkdownRemark\":{\"html\":\"<p><code>&#x3C;TransitionGroup></code> renders a <code>&#x3C;div></code> by default. You can change this\\nbehavior by providing a <code>component</code> prop.\\nIf you use React v16+ and would like to avoid a wrapping <code>&#x3C;div></code> element\\nyou can pass in <code>component={null}</code>. This is useful if the wrapping div\\nborks your css styles.</p>\"}},\"doclets\":{\"type\":null}},{\"name\":\"children\",\"required\":false,\"type\":{\"name\":\"node\",\"value\":null,\"raw\":null},\"defaultValue\":null,\"description\":{\"childMarkdownRemark\":{\"html\":\"<p>A set of <code>&#x3C;Transition></code> components, that are toggled <code>in</code> and out as they\\nleave. the <code>&#x3C;TransitionGroup></code> will inject specific transition props, so\\nremember to spread them through if you are wrapping the <code>&#x3C;Transition></code> as\\nwith our <code>&#x3C;Fade></code> example.</p>\"}},\"doclets\":{\"type\":null}},{\"name\":\"appear\",\"required\":false,\"type\":{\"name\":\"bool\",\"value\":null,\"raw\":null},\"defaultValue\":null,\"description\":{\"childMarkdownRemark\":{\"html\":\"<p>A convenience prop that enables or disables appear animations\\nfor all children. Note that specifying this will override any defaults set\\non individual children Transitions.</p>\"}},\"doclets\":{\"type\":null}},{\"name\":\"enter\",\"required\":false,\"type\":{\"name\":\"bool\",\"value\":null,\"raw\":null},\"defaultValue\":null,\"description\":{\"childMarkdownRemark\":{\"html\":\"<p>A convenience prop that enables or disables enter animations\\nfor all children. Note that specifying this will override any defaults set\\non individual children Transitions.</p>\"}},\"doclets\":{\"type\":null}},{\"name\":\"exit\",\"required\":false,\"type\":{\"name\":\"bool\",\"value\":null,\"raw\":null},\"defaultValue\":null,\"description\":{\"childMarkdownRemark\":{\"html\":\"<p>A convenience prop that enables or disables exit animations\\nfor all children. Note that specifying this will override any defaults set\\non individual children Transitions.</p>\"}},\"doclets\":{\"type\":null}},{\"name\":\"childFactory\",\"required\":false,\"type\":{\"name\":\"Function(child: ReactElement) -> ReactElement\",\"value\":null,\"raw\":null},\"defaultValue\":{\"value\":\"child => child\",\"computed\":false},\"description\":{\"childMarkdownRemark\":{\"html\":\"<p>You may need to apply reactive updates to a child as it is exiting.\\nThis is generally done by using <code>cloneElement</code> however in the case of an exiting\\nchild the element has already been removed and not accessible to the consumer.</p>\\n<p>If you do need to update a child as it leaves you can provide a <code>childFactory</code>\\nto wrap every child, even the ones that are leaving.</p>\"}},\"doclets\":{\"type\":\"Function(child: ReactElement) -> ReactElement\"}}]}},\"pathContext\":{\"displayName\":\"TransitionGroup\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/transition-group.json\n// module id = 414\n// module chunks = 205003755392829"],"sourceRoot":""}