webpackJsonp([0x88e94476ca6d],{415:function(n,a){n.exports={data:{metadata:{displayName:"Transition",composes:null,description:{childMarkdownRemark:{html:'<p>The Transition component lets you describe a transition from one component\nstate to another <em>over time</em> with a simple declarative API. Most commonly\nit\'s used to animate the mounting and unmounting of a component, but can also\nbe used to describe in-place transition states as well.</p>\n<p>By default the <code>Transition</code> component does not alter the behavior of the\ncomponent it renders, it only tracks "enter" and "exit" states for the components.\nIt\'s up to you to give meaning and effect to those states. For example we can\nadd styles to a component when it enters or exits:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">import</span> Transition <span class="token keyword">from</span> <span class="token string">\'react-transition-group/Transition\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> duration <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> defaultStyle <span class="token operator">=</span> <span class="token punctuation">{</span>\n  transition<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`opacity </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>duration<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms ease-in-out`</span></span><span class="token punctuation">,</span>\n  opacity<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> transitionStyles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entering<span class="token punctuation">:</span> <span class="token punctuation">{</span> opacity<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  entered<span class="token punctuation">:</span>  <span class="token punctuation">{</span> opacity<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Fade <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">in</span><span class="token punctuation">:</span> inProp <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span> <span class="token attr-name">in</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>inProp<span class="token punctuation">}</span></span> <span class="token attr-name">timeout</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>duration<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token punctuation">{</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>defaultStyle<span class="token punctuation">,</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>transitionStyles<span class="token punctuation">[</span>state<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        I\'m a fade Transition<span class="token operator">!</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">}</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>As noted the <code>Transition</code> component doesn\'t <em>do</em> anything by itself to its child component.\nWhat it does do is track transition states over time so you can update the\ncomponent (such as by adding styles or classes) when it changes states.</p>\n<p>There are 4 main states a Transition can be in:</p>\n<ul>\n<li><code>entering</code></li>\n<li><code>entered</code></li>\n<li><code>exiting</code></li>\n<li><code>exited</code></li>\n</ul>\n<p>Transition state is toggled via the <code>in</code> prop. When <code>true</code> the component begins the\n"Enter" stage. During this stage, the component will shift from its current transition state,\nto <code>\'entering\'</code> for the duration of the transition and then to the <code>\'entered\'</code> stage once\nit\'s complete. Let\'s take the following example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code>state<span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ntoggleEnterState <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span> <span class="token attr-name">in</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">}</span></span> <span class="token attr-name">timeout</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">500</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>toggleEnterState<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click to Enter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>When the button is clicked the component will shift to the <code>\'entering\'</code> state and\nstay there for 500ms (the value of <code>timeout</code>) before it finally switches to <code>\'entered\'</code>.</p>\n<p>When <code>in</code> is <code>false</code> the same thing happens except the state moves from <code>\'exiting\'</code> to <code>\'exited\'</code>.</p>\n<blockquote>\n<p><strong>Note</strong>: For simpler transitions the <code>Transition</code> component might be enough, but\ntake into account that it\'s platform-agnostic, while the <code>CSSTransition</code> component\n<a href="https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215">forces reflows</a>\nin order to make more complex transitions more predictable. For example, even though\nclasses <code>example-enter</code> and <code>example-enter-active</code> are applied immediately one after\nanother, you can still transition from one to the other because of the forced reflow\n(read <a href="https://github.com/reactjs/react-transition-group/issues/159#issuecomment-322761171">this issue</a>\nfor more info). Take this into account when choosing between <code>Transition</code> and\n<code>CSSTransition</code>.</p>\n</blockquote>\n<h2>Example</h2>\n<iframe src="https://codesandbox.io/embed/741op4mmj0?fontsize=14" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>'}},props:[{name:"children",required:!0,type:{name:"union",value:[{name:"func"},{name:"element"}],raw:null},defaultValue:null,description:{childMarkdownRemark:{html:'<p>A <code>function</code> child can be used instead of a React element.\nThis function is called with the current transition status\n(\'entering\', \'entered\', \'exiting\', \'exited\', \'unmounted\'), which can be used\nto apply context specific props to a component.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span> <span class="token attr-name">timeout</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">150</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">{</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`fade fade-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>'}},doclets:{type:null}},{name:"in",required:!1,type:{name:"bool",value:null,raw:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:"<p>Show the component; triggers the enter or exit states</p>"}},doclets:{type:null}},{name:"mountOnEnter",required:!1,type:{name:"bool",value:null,raw:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:'<p>By default the child component is mounted immediately along with\nthe parent <code>Transition</code> component. If you want to "lazy mount" the component on the\nfirst <code>in={true}</code> you can set <code>mountOnEnter</code>. After the first enter transition the component will stay\nmounted, even on "exited", unless you also specify <code>unmountOnExit</code>.</p>'}},doclets:{type:null}},{name:"unmountOnExit",required:!1,type:{name:"bool",value:null,raw:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:"<p>By default the child component stays mounted after it reaches the <code>'exited'</code> state.\nSet <code>unmountOnExit</code> if you'd prefer to unmount the component after it finishes exiting.</p>"}},doclets:{type:null}},{name:"appear",required:!1,type:{name:"bool",value:null,raw:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:'<p>Normally a component is not transitioned if it is shown when the <code>&#x3C;Transition></code> component mounts.\nIf you want to transition on the first mount set <code>appear</code> to <code>true</code>, and the\ncomponent will transition in as soon as the <code>&#x3C;Transition></code> mounts.</p>\n<blockquote>\n<p>Note: there are no specific "appear" states. <code>appear</code> only adds an additional <code>enter</code> transition.</p>\n</blockquote>'}},doclets:{type:null}},{name:"enter",required:!1,type:{name:"bool",value:null,raw:null},defaultValue:{value:"true",computed:!1},description:{childMarkdownRemark:{html:"<p>Enable or disable enter transitions.</p>"}},doclets:{type:null}},{name:"exit",required:!1,type:{name:"bool",value:null,raw:null},defaultValue:{value:"true",computed:!1},description:{childMarkdownRemark:{html:"<p>Enable or disable exit transitions.</p>"}},doclets:{type:null}},{name:"timeout",required:!1,type:{name:"number | { enter?: number, exit?: number }",value:null,raw:"(props, ...args) => {\n  let pt = timeoutsShape\n  if (!props.addEndListener) pt = pt.isRequired\n  return pt(props, ...args);\n}"},defaultValue:null,description:{childMarkdownRemark:{html:'<p>The duration of the transition, in milliseconds.\nRequired unless <code>addEndListener</code> is provided</p>\n<p>You may specify a single timeout for all transitions like: <code>timeout={500}</code>,\nor individually like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code>timeout<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n enter<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n exit<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre>\n      </div>'}},doclets:{type:"{number | { enter?: number, exit?: number }}"}},{name:"addEndListener",required:!1,type:{name:"func",value:null,raw:null},defaultValue:null,description:{childMarkdownRemark:{html:'<p>Add a custom transition end trigger. Called with the transitioning\nDOM node and a <code>done</code> callback. Allows for more fine grained transition end\nlogic. <strong>Note:</strong> Timeouts are still used as a fallback if provided.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code>addEndListener<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// use the css transitionend event to mark the finish of a transition</span>\n  node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'transitionend\'</span><span class="token punctuation">,</span> done<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre>\n      </div>'}},doclets:{type:null}},{name:"onEnter",required:!1,type:{name:"Function(node: HtmlElement, isAppearing: bool) -> void",value:null,raw:null},defaultValue:{value:"function noop() {}",computed:!1},description:{childMarkdownRemark:{html:'<p>Callback fired before the "entering" status is applied. An extra parameter\n<code>isAppearing</code> is supplied to indicate if the enter stage is occurring on the initial mount</p>'}},doclets:{type:"Function(node: HtmlElement, isAppearing: bool) -> void"}},{name:"onEntering",required:!1,type:{name:"Function(node: HtmlElement, isAppearing: bool)",value:null,raw:null},defaultValue:{value:"function noop() {}",computed:!1},description:{childMarkdownRemark:{html:'<p>Callback fired after the "entering" status is applied. An extra parameter\n<code>isAppearing</code> is supplied to indicate if the enter stage is occurring on the initial mount</p>'}},doclets:{type:"Function(node: HtmlElement, isAppearing: bool)"}},{name:"onEntered",required:!1,type:{name:"Function(node: HtmlElement, isAppearing: bool) -> void",value:null,raw:null},defaultValue:{value:"function noop() {}",computed:!1},description:{childMarkdownRemark:{html:'<p>Callback fired after the "entered" status is applied. An extra parameter\n<code>isAppearing</code> is supplied to indicate if the enter stage is occurring on the initial mount</p>'}},doclets:{type:"Function(node: HtmlElement, isAppearing: bool) -> void"}},{name:"onExit",required:!1,type:{name:"Function(node: HtmlElement) -> void",value:null,raw:null},defaultValue:{value:"function noop() {}",computed:!1},description:{childMarkdownRemark:{html:'<p>Callback fired before the "exiting" status is applied.</p>'}},doclets:{type:"Function(node: HtmlElement) -> void"}},{name:"onExiting",required:!1,type:{name:"Function(node: HtmlElement) -> void",value:null,raw:null},defaultValue:{value:"function noop() {}",computed:!1},description:{childMarkdownRemark:{html:'<p>Callback fired after the "exiting" status is applied.</p>'}},doclets:{type:"Function(node: HtmlElement) -> void"}},{name:"onExited",required:!1,type:{name:"Function(node: HtmlElement) -> void",value:null,raw:null},defaultValue:{value:"function noop() {}",computed:!1},description:{childMarkdownRemark:{html:'<p>Callback fired after the "exited" status is applied.</p>'}},doclets:{type:"Function(node: HtmlElement) -> void"}}]}},pathContext:{displayName:"Transition"}}}});
//# sourceMappingURL=path---transition-30a975947aab81ce85dd.js.map