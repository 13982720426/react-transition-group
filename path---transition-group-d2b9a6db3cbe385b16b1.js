webpackJsonp([0xba7328048f3d],{414:function(e,n){e.exports={data:{metadata:{displayName:"TransitionGroup",composes:null,description:{childMarkdownRemark:{html:'<p>The <code>&#x3C;TransitionGroup></code> component manages a set of <code>&#x3C;Transition></code> components\nin a list. Like with the <code>&#x3C;Transition></code> component, <code>&#x3C;TransitionGroup></code>, is a\nstate machine for managing the mounting and unmounting of components over\ntime.</p>\n<p>Consider the example below using the <code>Fade</code> CSS transition from before.\nAs items are removed or added to the TodoList the <code>in</code> prop is toggled\nautomatically by the <code>&#x3C;TransitionGroup></code>. You can use <em>any</em> <code>&#x3C;Transition></code>\ncomponent in a <code>&#x3C;TransitionGroup></code>, not just css.</p>\n<h2>Example</h2>\n<iframe src="https://codesandbox.io/embed/00rqyo26kn?fontsize=14" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>\n<p>Note that <code>&#x3C;TransitionGroup></code>  does not define any animation behavior!\nExactly <em>how</em> a list item animates is up to the individual <code>&#x3C;Transition></code>\ncomponents. This means you can mix and match animations across different\nlist items.</p>'}},props:[{name:"component",required:!1,type:{name:"any",value:null,raw:null},defaultValue:{value:"'div'",computed:!1},description:{childMarkdownRemark:{html:"<p><code>&#x3C;TransitionGroup></code> renders a <code>&#x3C;div></code> by default. You can change this\nbehavior by providing a <code>component</code> prop.\nIf you use React v16+ and would like to avoid a wrapping <code>&#x3C;div></code> element\nyou can pass in <code>component={null}</code>. This is useful if the wrapping div\nborks your css styles.</p>"}},doclets:{type:null}},{name:"children",required:!1,type:{name:"node",value:null,raw:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>A set of <code>&#x3C;Transition></code> components, that are toggled <code>in</code> and out as they\nleave. the <code>&#x3C;TransitionGroup></code> will inject specific transition props, so\nremember to spread them through if you are wrapping the <code>&#x3C;Transition></code> as\nwith our <code>&#x3C;Fade></code> example.</p>"}},doclets:{type:null}},{name:"appear",required:!1,type:{name:"bool",value:null,raw:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>A convenience prop that enables or disables appear animations\nfor all children. Note that specifying this will override any defaults set\non individual children Transitions.</p>"}},doclets:{type:null}},{name:"enter",required:!1,type:{name:"bool",value:null,raw:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>A convenience prop that enables or disables enter animations\nfor all children. Note that specifying this will override any defaults set\non individual children Transitions.</p>"}},doclets:{type:null}},{name:"exit",required:!1,type:{name:"bool",value:null,raw:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>A convenience prop that enables or disables exit animations\nfor all children. Note that specifying this will override any defaults set\non individual children Transitions.</p>"}},doclets:{type:null}},{name:"childFactory",required:!1,type:{name:"Function(child: ReactElement) -> ReactElement",value:null,raw:null},defaultValue:{value:"child => child",computed:!1},description:{childMarkdownRemark:{html:"<p>You may need to apply reactive updates to a child as it is exiting.\nThis is generally done by using <code>cloneElement</code> however in the case of an exiting\nchild the element has already been removed and not accessible to the consumer.</p>\n<p>If you do need to update a child as it leaves you can provide a <code>childFactory</code>\nto wrap every child, even the ones that are leaving.</p>"}},doclets:{type:"Function(child: ReactElement) -> ReactElement"}}]}},pathContext:{displayName:"TransitionGroup"}}}});
//# sourceMappingURL=path---transition-group-d2b9a6db3cbe385b16b1.js.map